apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
def artifactId ='wsq-android'
def groupId = 'com.gemalto.wsq'
def artifactVersion = "1.2-SNAPSHOT"

android {
    namespace 'com.gemalto.wsq'
    compileSdk 35
    defaultConfig {
        minSdkVersion 21
        versionName "2.0"
        versionCode 3
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.22.1"
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    ndkVersion "29.0.13846066"
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'com.google.android.material:material:1.12.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
}

ext {
    bintrayRepo = 'maven'
    bintrayName = 'WSQForAndroid'

    publishedGroupId = 'com.gemalto.wsq'
    libraryName = 'WSQForAndroid'
    artifact = 'wsq-android'

    libraryDescription = 'A WSQ image encoder/decoder for Android'

    siteUrl = 'https://github.com/gemalto/WSQForAndroid'
    gitUrl = 'https://github.com/gemalto/WSQForAndroid.git'

    libraryVersion = '1.2'

    developerId = 'michal-dvorak-thales'
    developerName = 'Michal Dvorak'
    developerEmail = 'michal.dvorak@thalesgroup.com'

    licenseName = 'The 2-Clause BSD License'
    licenseUrl = 'https://opensource.org/licenses/BSD-2-Clause'
    allLicenses = ["BSD-2-Clause"]
}

project.afterEvaluate {
    publishing {
        publications {
            android.libraryVariants.all { variant ->
                variant.outputs.each { output ->
                    "${variant.name.capitalize()}"(MavenPublication) {
                        setGroupId groupId
                        setArtifactId artifactId
                        version artifactVersion
                        artifact variant.outputs[0].packageLibrary

                        pom.withXml {
                            def dependenciesNode = asNode().appendNode('dependencies')
                            configurations.implementation.allDependencies.each {
                                if (it.group != null && (it.name != null || "unspecified".equals(it.name)) && it.version != null) {
                                    def dependencyNode = dependenciesNode.appendNode('dependency')
                                    dependencyNode.appendNode('groupId', it.group)
                                    dependencyNode.appendNode('artifactId', it.name)
                                    dependencyNode.appendNode('version', it.version)
                                }
                            }
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                url = "$snapshotsRepoUrl"
                credentials {
                    username "$mavenUser"
                    password "$mavenPassword"
                }
            }
        }
    }
}
